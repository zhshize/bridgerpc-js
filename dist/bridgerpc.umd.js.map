{"version":3,"file":"bridgerpc.umd.js","sources":["../src/rpcRequest.ts","../src/rpcResponse.ts","../src/rpcError.ts","../src/operationTimeoutError.ts","../src/bridgeRpc.ts"],"sourcesContent":["import msgpack from 'msgpack-lite'\n\nexport default class RpcRequest {\n  public bridgerpc: string = '1.0'\n  public id: string | null = null\n  public method: string = ''\n  public data: any = null\n\n  public setData(obj: any): void {\n    this.data = msgpack.encode(obj)\n  }\n\n  public getData<T>(): T {\n    return msgpack.decode(this.data) as T\n  }\n\n  public encodeToMessagePack(): any {\n    return msgpack.encode({\n      bridgerpc: this.bridgerpc,\n      id: this.id,\n      method: this.method,\n      data: this.data\n    })\n  }\n}\n","import RpcError from './rpcError'\nimport msgpack from 'msgpack-lite'\n\nexport default class RpcResponse {\n  public bridgerpc: string = '1.0'\n  public id: string | null = null\n  public result: any = null\n  public error: RpcError | null = null\n\n  public setResult(obj: any): void {\n    this.result = msgpack.encode(obj)\n  }\n\n  public getResult<T>(): T {\n    return msgpack.decode(this.result) as T\n  }\n\n  public encodeToMessagePack(): any {\n    const r: any = {\n      bridgerpc: this.bridgerpc,\n      id: this.id,\n      result: this.result,\n      error: null\n    }\n    if (this.error !== null && this.error !== undefined) {\n      const error = this.error as RpcError\n      r.error = {\n        code: error.code,\n        message: error.message,\n        data: error.data\n      }\n    }\n    return msgpack.encode(r)\n  }\n}\n","import msgpack from 'msgpack-lite'\n\nexport default class RpcError {\n  public code: number = 0\n  public message: string = ''\n  public data: any = null\n\n  public setData(obj: any): void {\n    this.data = msgpack.encode(obj)\n  }\n\n  public getData<T>(): T {\n    return msgpack.decode(this.data) as T\n  }\n}\n","export default class OperationTimeoutError extends Error {}\n","// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\n// ...\n// @ts-ignore\nimport RpcRequest from './rpcRequest'\nimport RpcResponse from './rpcResponse'\nimport msgpack from 'msgpack-lite'\nimport RpcError from './rpcError'\nimport OperationTimeoutError from './operationTimeoutError'\n\nexport { RpcRequest, RpcResponse, RpcError, OperationTimeoutError }\n\n/**\n * RPC Request handler must process a request and return a [[RpcResponse]].\n */\nexport type RpcHandler = (request: RpcRequest) => any\n\n/**\n * RPC Notification handler must process a request, nothing should be returned.\n */\nexport type RpcNotificationHandler = (request: RpcRequest) => void\n\n/**\n * [[BridgeRpc]] is an Bridge RPC client can connect to Bridge RPC server and\n * register methods and emit a request or a notification.\n */\nexport default class BridgeRpc {\n  /**\n   * Initialize an [[BridgeRpc]] object, start receiving/sending after called\n   * [[connect]].  Suggest you register the handling methods before you call\n   * [[connect]].\n   * @param url Url of the server to be connected.\n   */\n  public constructor(url: string) {\n    this.url = url\n    this.handlers = new RequestHandlerDictionary()\n    this.notificationHandlers = new NotificationHandlerDictionary()\n    this.callbacks = new CallbackDictionary()\n  }\n\n  protected _rawSocket: WebSocket | null = null\n  protected url: string\n  protected handlers: RequestHandlerDictionary\n  protected notificationHandlers: NotificationHandlerDictionary\n  protected callbacks: CallbackDictionary\n\n  /**\n   * Get [[WebSocket]] object maintained by [[BridgeRpc]] object.\n   * **BE CAREFUL** to access this getter.\n   */\n  get rawSocket(): WebSocket {\n    if (this._rawSocket === null) {\n      this.connect()\n    }\n    return this._rawSocket as WebSocket\n  }\n\n  /**\n   * Connect to the server.\n   * Suggest you register the handling methods before you call [[connect]].\n   */\n  public connect() {\n    this._rawSocket = new WebSocket(this.url)\n    this._rawSocket.binaryType = 'arraybuffer'\n    this._rawSocket.onmessage = this.onMessage.bind(this)\n  }\n\n  /**\n   * An event listener to be called when the server is connected.\n   * @param connected The event listener.\n   */\n  public onConnect(connected: () => void): void {\n    this.rawSocket.onopen = connected\n  }\n\n  /**\n   * An event listener with method name to be called when received a request.\n   * @param method The name of the method will be registered.\n   * @param handler The event listener, must returned a [[RpcResponse]].\n   */\n  public onRequest(method: string, handler: RpcHandler): void {\n    this.handlers[method] = handler\n  }\n\n  /**\n   * An event listener with method name to be called when received a notification.\n   * @param method The name of the method will be registered.\n   * @param handler The event listener, no return value.\n   */\n  public onNotify(method: string, handler: RpcNotificationHandler): void {\n    const m = this.notificationHandlers[method]\n    if (m === null || m === undefined) {\n      this.notificationHandlers[method] = new Array<RpcHandler>()\n    }\n    this.notificationHandlers[method].push(handler)\n  }\n\n  /**\n   * Call remote method.\n   * @param method The method name to be called.\n   * @param data Parameters to be sent.\n   * @param timeoutMilliSeconds Timeout of request operation, unit is millisecond.\n   */\n  public request(\n    method: string,\n    data: any,\n    timeoutMilliSeconds: number = 5000\n  ): Promise<RpcResponse> {\n    const id = BridgeRpc.randomString()\n    this.rawSocket.send(\n      msgpack.encode({\n        bridgerpc: '1.0',\n        method: method,\n        data: data,\n        id: id\n      })\n    )\n    return new Promise<RpcResponse>((resolve, reject) => {\n      this.callbacks[id] = new RpcCallback(resolve, reject)\n      setTimeout(() => {\n        if (this.callbacks.hasOwnProperty(id)) {\n          this.callbacks[id].reject(\n            new OperationTimeoutError(`Rpc request timeout (${timeoutMilliSeconds} ms)`)\n          )\n        }\n      }, timeoutMilliSeconds)\n    })\n  }\n\n  /**\n   * Call remote method without response.\n   * @param method The method name to be called.\n   * @param data Parameters to be sent.\n   */\n  public notify(method: string, data: any): void {\n    this.rawSocket.send(\n      msgpack.encode({\n        bridgerpc: '1.0',\n        method: method,\n        data: data,\n        id: null\n      })\n    )\n  }\n\n  /**\n   * An event listener for [[WebSocket]] onmessage to handle BridgeRpc message.\n   * @param event Event object from WebSocket.onmessage\n   */\n  protected onMessage(event: any) {\n    const data = msgpack.decode(new Uint8Array(event.data))\n    if (data.method !== undefined && data.method !== null) {\n      // It's a request or notification\n      if (data.id !== undefined && data.id !== null) {\n        // It's a request\n        const request = data as RpcRequest\n        const handler = this.handlers[request.method]\n        if (handler === null || handler === undefined) {\n          // Method not found\n          this.rawSocket.send(BridgeRpc.methodNotFoundResponse(request).encodeToMessagePack())\n          return\n        }\n        let res: any\n        try {\n          res = handler(request)\n          if (!(res instanceof RpcResponse)) {\n            let generateResponse = new RpcResponse()\n            generateResponse.id = request.id\n            generateResponse.result = res\n            res = generateResponse\n          }\n          if (res === undefined || res === null) {\n            // Internal Error\n            this.rawSocket.send(\n              BridgeRpc.internalErrorResponse(\n                request,\n                'Method called, but no response.',\n                null\n              ).encodeToMessagePack()\n            )\n            return\n          }\n        } catch (e) {\n          // Internal Error\n          this.rawSocket.send(\n            BridgeRpc.internalErrorResponse(\n              request,\n              'Error occurred when method calling.',\n              e\n            ).encodeToMessagePack()\n          )\n          return\n        }\n        const response = res as RpcResponse\n        response.id = request.id\n        this.rawSocket.send(response.encodeToMessagePack())\n      } else {\n        // It's a notification\n        const notification = data as RpcRequest\n        const handlers = this.handlers[notification.method]\n        if (handlers.length === 0) {\n          // Method not found (should NOT sent response)\n        }\n        try {\n          this.notificationHandlers[notification.method].forEach(handler => {\n            handler(data)\n          })\n        } catch (e) {\n          // ignore\n        }\n      }\n    } else {\n      // It's a response\n      const response = data as RpcResponse\n      const callback = this.callbacks[response.id as string]\n      try {\n        callback.resolve(response)\n        delete this.callbacks[response.id as string]\n      } catch (e) {\n        // ignore\n      }\n    }\n  }\n\n  /**\n   * Close the connection.\n   * @param code A numeric value indicating the status code explaining why the connection is being\n   * closed. If this parameter is not specified, a default value of 1005 is assumed. See the [list\n   * of status codes](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes)\n   * of CloseEvent for permitted values.\n   * @param reason A human-readable string explaining why the connection is closing. This string\n   * must be no longer than 123 bytes of UTF-8 text (**not** characters).\n   */\n  public close(code: number, reason: string): void {\n    this.rawSocket.close(code, reason)\n  }\n\n  protected static methodNotFoundResponse(request: RpcRequest): RpcResponse {\n    const error = new RpcError()\n    error.code = -3\n    error.message = 'Method not found.'\n    error.setData(request)\n    const response = new RpcResponse()\n    response.error = error\n    response.result = null\n    response.id = request.id\n    return response\n  }\n\n  protected static internalErrorResponse(\n    request: RpcRequest,\n    message: string,\n    error: any\n  ): RpcResponse {\n    const err = new RpcError()\n    err.code = -10\n    err.message = message\n    err.setData(error)\n    const response = new RpcResponse()\n    response.error = err\n    response.result = null\n    response.id = request.id\n    return response\n  }\n\n  protected static randomString(): string {\n    return (\n      Math.random()\n        .toString(36)\n        .substring(2, 10) +\n      Math.random()\n        .toString(36)\n        .substring(2, 10)\n    )\n  }\n}\n\nclass RequestHandlerDictionary {\n  [index: string]: RpcHandler\n}\n\nclass NotificationHandlerDictionary {\n  [index: string]: RpcNotificationHandler[]\n}\n\nclass RpcCallback {\n  public constructor(resolve: (response: RpcResponse) => void, reject: (reason: any) => void) {\n    this.resolve = resolve\n    this.reject = reject\n  }\n\n  public resolve: (response: RpcResponse) => void\n  public reject: (reason: any) => void\n  /*public call(response: RpcResponse) {\n    try {\n      this.resolve(response);\n    } catch (e) {\n      this.reject(e);\n    }\n  }*/\n}\n\nclass CallbackDictionary {\n  [index: string]: RpcCallback\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}